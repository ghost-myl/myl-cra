/**
 * tree shaking   去除无用代码
 * 前提：1、必须使用ES6代码
 *      2、开启production环境会自动开启tree shaking
 * 作用：减少代码体积
 *
 * 在package.json中配置
 *  sideEffects:false  所有代码都没有副作用    (都可以进行tree  shaking)
 *   问题：可能会把css/@babel/polyfile (副作用)文件干掉
 *   解决："sideEffects":["*.css"]
 * */
const webpack = require('webpack');
const { resolve } = require('path');
//  将所有的css提取到同一个文件夹中
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
// 压缩css文件
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
const { merge } = require('webpack-merge');
const common = require('./webpack.common');

const cssloader = [
  // 将css提出的方法替换style-loader
  MiniCssExtractPlugin.loader,
  'css-loader',
  {
    loader: 'postcss-loader',
    options: {
      postcssOptions: {
        plugins: [['autoprefixer'], require('postcss-preset-env')()],
      },
    },
  },
];
module.exports = merge(common, {
  // 启动环境
  mode: 'production',
  // 转换方法
  module: {
    rules: [
      <% if(jsType==='js'){ %>
      {
        /**
         * lazy loading懒加载
         */
        test: /\.(js|jsx)$/,
        include: resolve(__dirname, 'src'),
        exclude: /node_modules/,
        /**
         *  pre:优先执行
         *  post:延后执行
         *  不设置enforce则顺序执行
         */
        enforce: 'pre',
        use: [
          {
            loader: 'babel-loader',
            options: {
              presets: ['@babel/preset-env', '@babel/preset-react'],
              // 缓存：第二次构建时，会读取之前的缓存
              cacheDirectory: true,
            },
          },
        ],
      },
      <% } %>
      <% if(jsType === 'ts') { %>
      {
        test: /\.tsx?$/,
        use: 'ts-loader',
        include: resolve(__dirname, 'src'),
        exclude: /node_modules/, //表示node_modules中的tsx文件不做处理
        use: [
          {
            options: {
              // 缓存：第二次构建时，会读取之前的缓存
              cacheDirectory: true,
            },
          },
        ],
      },
      <% } %>
      {
        test: /\.css$/,
        use: [...cssloader],
      },
      <% if(jsType==='less'){%>
      {
        test: /\.less$/,
        use: [...cssloader, 'less-loader'],
      },
      <% } %>
      <% if(jsType==='less'){%>
      {
        test: /.s[ac]ss$/,
        use: [...cssloader, 'sass-loader'],
      },
      <% } %>
      {
        exclude: /.(html|less|css|sass|js|jsx|ts|tsx)$/,
        test: /\.(jpg|jpe|png|gif)$/,
        loader: 'file-loader',
        options: {
          name: 'imgs/[name].[ext]',
          outputPath: 'other',
        },
      },
      {
        test: /\.(ect|ttf|svg|woff)$/,
        use: {
          loader: 'file-loader',
          options: {
            name: 'icon/[name].[ext]',
          },
        },
      },
    ],
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: 'css/main.css',
    }),
    new CssMinimizerPlugin(),
    // 显示百分比编译
    new webpack.ProgressPlugin({
      activeModules: false,
      entries: true,
      modules: true,
      modulesCount: 5000,
      profile: false,
      dependencies: true,
      dependenciesCount: 10000,
      percentBy: 'entries',
    }),
  ],
  optimization: {
    usedExports: true,
    minimize: true,
  },
});
